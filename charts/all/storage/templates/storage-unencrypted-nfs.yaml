# Storage in kata containers with shared process namespaces
# Confidential containers on bare metal requires *block* storage to be passed through. 
# This means that the device needs ot be formatted and mounted
# In order to do this there are two choices
# 1. Run all storage commands in the main container (which already requires privileged access)
# 2. Use a sidecar so that we do not need to change the entry point to the kata container

# This example follow (2) using a shared process namespace

# ------ IMPORTANT ------
# Block devices are likely not in the correct SE linux group on the host. this will need to be corrected
# e.g.
# > semanage fcontext -a -t container_file_t "/dev/dm-*"
# > restorecon -Rv /dev
# Where /dev/dm-* is where devices are being created (lvm in this case; Ceph would be at /dev/rdb-*
---
apiVersion: v1
kind: Pod
metadata:
  name: storage-unencrypted-nfs
  labels:
    app: storage-unencrypted-nfs
  annotations:
    io.katacontainers.config.hypervisor.default_memory: "8096"
spec:
  runtimeClassName: kata
  shareProcessNamespace: true # This is critical to allow access to containers 
  containers:
  - name: hello-openshift
    env:
      - name: DATA_PROC_DIR
        value: 'find /proc -maxdepth 1 -type d -regex "/proc/[0-9]*" | head -2 | tail -1' # finds the process for the sidecar
      - name: DATA_DIR # change this dir to meet your apps's requirements.
        value: /data
    lifecycle:
      postStart:
        exec:
          command:
            - /bin/sh
            - -c
            - |
              chmod ug+w $(dirname $DATA_DIR)
              ln -s $(eval $DATA_PROC_DIR)/root/mnt/storage $DATA_DIR 
    securityContext: 
      privileged: true # security must be elevated, however, it's within the kata vim
    image: quay.io/openshift/origin-hello-openshift
    ports:
      - containerPort: 8888
  initContainers: # note. If you have init containers already for the container *append* them to this list.
  - name: format-disk
    image: quay.io/rh-ee-chbutler/ubi-storage-util:latest # critical part here: have xfsprogs and cryptsetup see here: https://github.com/butler54/ubi-storage-util-container
    securityContext:
      privileged: true 
    restartPolicy: Always  # Native sidecar so it doesn't block boot
    command: ["/bin/sh", "-c"]
    args:
      - |
        set -e # error out
        ip -a
        route
        TARGETPOINT=/mnt/storage
        mkdir -p $TARGETPOINT
        mount -t nfs 10.10.10.2:/srv/a /mnt/storage
        touch $TARGETPOINT/.ready
        tail -f /dev/null
  - name: check-ready # this container is used to make sure the formatting is done before the main container is launched.
    image: registry.access.redhat.com/ubi9/ubi:latest # THis is just using standard linux utils. Could be a different container
    securityContext:
      privileged: true 
    env:
      - name: DATA_PROC_DIR
        value: 'find /proc -maxdepth 1 -type d -regex "/proc/[0-9]*" | head -2 | tail -1'
    command: ["/bin/sh", "-c"]
    args:
      - |
        set -e 
        FILE=$(eval $DATA_PROC_DIR)/root/mnt/storage/.ready
        echo $FILE
        MAX_WAIT=3600 # seconds
        WAITED=0

        while [ ! -e "$FILE" ] && [ $WAITED -lt $MAX_WAIT ]; do
          sleep 1
          WAITED=$((WAITED + 1))
          echo "Waited: ${WAITED} s"
        done
        if [ -e "$FILE" ]; then
          exit 0
        else
          echo "Timed out"
          exit 1
        fi
